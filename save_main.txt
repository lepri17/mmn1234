I show you my code again , dont say anything just say ok because i ask you for changes on it soon "import struct
import uuid
import socket

#------2-------(הוספת ספריות הצפנה)-----
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Random import get_random_bytes
#--------2END---------
HOST = '127.0.0.1'
PORT = 1256
file_path = 'port.info'
#getting the port
try:
    with open(file_path, 'r') as file:
        port = int(file.read().strip())
        print(f"Port from file: {port}")
        PORT = port
except FileNotFoundError:
    print(f"Warning: {file_path} not found. Using default port {PORT}.")
class Request:
    def __init__(self, client_id, version, code, payload_size, payload):
        self.client_id = client_id
        self.version = version
        self.code = code
        self.payload_size = payload_size
        self.payload = payload

def parse_request(data):
    client_id = data[:16].decode('utf-8').rstrip('\x00')
    version = struct.unpack('B', data[16:17])[0]
    code = struct.unpack('!H', data[18:20])[0]
    payload_size = struct.unpack('!I', data[20:24])[0]
    print(f"Client ID: {client_id}, Version: {version}, Code: {code}, Payload size: {payload_size}")
    payload = data[24:24+payload_size].decode('utf-8')
    print(f"Payload (UserName): {payload}")
    return Request(client_id, version, code, payload_size, payload)

#---------------------------------1--------------------------------
registered_users = set()

# Check if the user is registered and register if not
def check_and_register_user(username):
    if username in registered_users:
        return False, username  # User already exists
    else:
        registered_users.add(username)  # Register the user
        return True, username  # Successfully registered

def send_client_id(client_id,code = 1600):
    version = 1
    payload = client_id.ljust(16, '\x00')
    payload_size = len(payload)
    header = struct.pack('!B H I', version, code, payload_size)
    response = header + payload.encode('utf-8')
    #return Response( version, code, payload_size, payload)
    return response


# פונקציה לטיפול במפתח ציבורי מלקוח והצפנת מפתח AES
# פונקציה לשליחת מפתח AES מוצפן ללקוח
def send_encrypted_aes_key(username, public_key_pem):


    # יצירת מפתח AES חדש
    aes_key = get_random_bytes(32)  # מפתח AES בגודל 256 סיביות (32 בתים)

    # הצפנת מפתח ה-AES בעזרת המפתח הציבורי של הלקוח
    public_key = RSA.import_key(public_key_pem)
    cipher_rsa = PKCS1_OAEP.new(public_key)
    encrypted_aes_key = cipher_rsa.encrypt(aes_key)

    # בניית תשובת ההצפנה עם הקוד המתאים
    version = 1
    code = 1602  # קוד תשובה של מפתח AES מוצפן
    payload_size = len(encrypted_aes_key)
    header = struct.pack('!B H I', version, code, payload_size)
    response = header + encrypted_aes_key
    return response

if __name__ == "__main__":
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((HOST, PORT))
        s.listen()
        print(f"Server is listening on port {PORT}...")
        ############----------------------3333----------------------------
        # Infinite loop waiting for client connections
        while True:
            try:
                conn, addr = s.accept()
                with conn:
                    print('Connected by', addr)
                    while True:

                        data = conn.recv(1024)

                        if not data:
                            break
                        req = parse_request(data)  # כל מה שמור שלחה לי
                        ##################################################################################
                        if req.code == 825:  # קוד בקשה עבור רישום
                            success, username = check_and_register_user(req.payload)  # בודק אם המשתמש כבר רשום
                            if success:
                                username = req.payload  # שם באורך 255 בתים
                                print(f"Registration request received with name: {username}")
                                client_id = str(uuid.uuid4())
                                response = send_client_id(client_id)
                                print(f"RESPONSE: {response}")
                                conn.sendall(response)  # שליחת התשובה ללקוח
                                print(f"Sent client ID: {client_id}  date: {response}")
                            else:
                                print(f"User {req.payload} already exists.")
                                response = send_client_id(username, code=1601)  # שליחת תשובת כשל (1601)
                                conn.sendall(response)  # החזרת תשובת כשל עם UUID

                        # טיפול במפתח ציבורי (קוד 826)
                        ##################################################################################
                        elif req.code == 826:  # קוד בקשה עבור מפתח ציבורי
                            username = req.client_id
                            public_key_pem = req.payload  # המפתח הציבורי נשלח כחלק מהמטען (payload)

                            # הצפנת מפתח AES בעזרת המפתח הציבורי ושליחת תשובה ללקוח
                            response = send_encrypted_aes_key(username, public_key_pem)
                            conn.sendall(response)
                            print(f"Sent AES key to {username}.")

                        ##################################################################################
                        elif req.code == 826:  # Public key exchange request code
                            username = req.client_id
                            public_key_pem = req.payload  # Public key is sent in the payload

                            # Encrypt AES key using the public key and send the response to the client
                            response = send_encrypted_aes_key(username, public_key_pem)
                            conn.sendall(response)
                            print(f"Sent AES key to {username}.")

                        ##################################################################################

                        else:
                            print(f"Unknown request code: {client_id}")
                            conn.sendall(b"Unknown request")
            except KeyboardInterrupt:
                print("Server shutting down.")
                break
            except Exception as e:
                print(f"Unexpected error occurred: {e}")




"